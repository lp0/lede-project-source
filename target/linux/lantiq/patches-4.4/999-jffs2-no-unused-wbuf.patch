diff --git a/fs/jffs2/os-linux.h b/fs/jffs2/os-linux.h
index 824e61e..53e3961 100644
--- a/fs/jffs2/os-linux.h
+++ b/fs/jffs2/os-linux.h
@@ -95,7 +95,6 @@ static inline void jffs2_init_inode_info(struct jffs2_inode_info *f)
 #define jffs2_ubivol(c) (0)
 #define jffs2_ubivol_setup(c) (0)
 #define jffs2_ubivol_cleanup(c) do {} while (0)
-#define jffs2_dirty_trigger(c) do {} while (0)
 
 #else /* NAND and/or ECC'd NOR support present */
 
@@ -136,7 +135,6 @@ void jffs2_ubivol_cleanup(struct jffs2_sb_info *c);
 #define jffs2_nor_wbuf_flash(c) (c->mtd->type == MTD_NORFLASH && ! (c->mtd->flags & MTD_BIT_WRITEABLE))
 int jffs2_nor_wbuf_flash_setup(struct jffs2_sb_info *c);
 void jffs2_nor_wbuf_flash_cleanup(struct jffs2_sb_info *c);
-void jffs2_dirty_trigger(struct jffs2_sb_info *c);
 
 #endif /* WRITEBUFFER */
 
diff --git a/fs/jffs2/super.c b/fs/jffs2/super.c
index 5ef21f4..afb4a36 100644
--- a/fs/jffs2/super.c
+++ b/fs/jffs2/super.c
@@ -101,7 +101,8 @@ static int jffs2_sync_fs(struct super_block *sb, int wait)
 	struct jffs2_sb_info *c = JFFS2_SB_INFO(sb);
 
 #ifdef CONFIG_JFFS2_FS_WRITEBUFFER
-	cancel_delayed_work_sync(&c->wbuf_dwork);
+	if (c->wbuf)
+		cancel_delayed_work_sync(&c->wbuf_dwork);
 #endif
 
 	mutex_lock(&c->alloc_sem);
diff --git a/fs/jffs2/wbuf.c b/fs/jffs2/wbuf.c
index b25d28a..90954aa 100644
--- a/fs/jffs2/wbuf.c
+++ b/fs/jffs2/wbuf.c
@@ -82,6 +82,8 @@ static void jffs2_clear_wbuf_ino_list(struct jffs2_sb_info *c)
 	c->wbuf_inodes = NULL;
 }
 
+static void jffs2_dirty_trigger(struct jffs2_sb_info *c);
+
 static void jffs2_wbuf_dirties_inode(struct jffs2_sb_info *c, uint32_t ino)
 {
 	struct jffs2_inodirty *new;
@@ -1168,12 +1170,12 @@ static void delayed_wbuf_sync(struct work_struct *work)
 	}
 }
 
-void jffs2_dirty_trigger(struct jffs2_sb_info *c)
+static void jffs2_dirty_trigger(struct jffs2_sb_info *c)
 {
 	struct super_block *sb = OFNI_BS_2SFFJ(c);
 	unsigned long delay;
 
-	if (sb->s_flags & MS_RDONLY)
+	if (!c->wbuf || sb->s_flags & MS_RDONLY)
 		return;
 
 	delay = msecs_to_jiffies(dirty_writeback_interval * 10);
